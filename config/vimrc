" ypsu's vimscript

" Various stuff added as time went by.
" Compilation of single files had a little bit more focus because
" at some point I was doing some ACM/TopCoder style coding competitions.

set backspace=indent,eol,start
set cmdheight=2
set history=50          " keep 50 lines of command line history
set ignorecase
set incsearch           " do incremental searching
set linebreak
set nobackup
set nocompatible
set nohls
set nowrap
set nowritebackup
set number
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set tabpagemax=64
set mouse=a
set notimeout
set ttimeout
set ttimeoutlen=1
set noswapfile
set hidden
set nofsync
set nojoinspaces
set virtualedit+=block
set tw=100
set t_RV=               " there are some problem with the cursor keys without this
set t_Co=16
colorscheme desert

" Disable auto-omnicompletion.
let g:OmniCpp_MayCompleteDot = 0
let g:OmniCpp_MayCompleteArrow = 0

" Keep window and cursor position when switching buffers
" Must be after the above commands because vim is buggy.
if v:version >= 700
  au BufLeave * if !&diff | let b:winview = winsaveview() | endif
  au BufEnter * if exists('b:winview') && !&diff | call winrestview(b:winview) | endif
endif

" disable paren highlighting
let g:loaded_matchparen = 1

"syntax on

" Map <Enter> to : so I don't have to press shift to get to the command line.
noremap <C-\> <Enter>
map <Enter> :

let &foldmethod = "marker"

set autoindent
set copyindent
set preserveindent

set noignorecase
set nrformats=hex

set completeopt+=longest
set wildmode=longest,list,full
set wildmenu
set wildignore=*.dll,*.o,*.out,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*.class,*.pdf

set clipboard=unnamed

" Some C/C++ specific autoindenting options
let &cinoptions = ':0,g0,t0'
" Display tabs to annoy myself
let &lcs = "trail:.,tab:> "
set list

" <Leader>l : turn on displaying red background after coloumn 100
nnoremap <silent> <Leader>l
      \ :if exists('w:long_line_match') <Bar>
      \   silent! call matchdelete(w:long_line_match) <Bar>
      \   unlet w:long_line_match <Bar>
      \ else <Bar>
      \   let w:long_line_match = matchadd('ErrorMsg', '\%>' . &textwidth . 'v.\+', -1) <Bar>
      \ endif<CR>

" Disable automatically adding comment beginnings to the line
autocmd BufEnter * set formatoptions-=ro

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
	au!

	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid or when inside an event handler
	" (happens when dropping a file on gvim).
	autocmd BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\   exe "normal g`\"" |

augroup END

map Q gq

let mapleader = "\\"

map <Up> gk
map <Down> gj
map <Home> g0
map <End> g$
imap <Up> <C-O>gk
imap <Down> <C-O>gj
imap <Home> <C-O>g0
imap <End> <C-O>g$

map <Leader>p :set invpaste <CR>:echo "paste mode: " . &paste<CR>

" Quote in mail
map <Leader>q :s/^/> / <CR>

" Move around windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" F1 - Edit last file
map <F1> <C-^>
" F2 - Save
map <F2> :update <CR>
vmap <F2> <Esc><F2>gv
" <Leader>F2 - Copy the whole buffer to the clipboard
map <Leader><F2> gg"+yG``zz
" Leader-F3 - Reload all
map <Leader><F3> :bufdo set eventignore= \| e <CR>
" F3 - Make
map <F3> :make<CR>
vmap <F3> <Esc><F3>gv
" F4 - Show terminal
map <F4> :!exit <CR>
vmap <F4> <Esc><F4>gv

" Toggle syntax highlight
map <F12> :call ToggleSyntaxHighlight()<CR>

" Leader-s: submit/commit current file to git
map <Leader>s :!git commit %:p -v<CR>
" Leader-a: submit/commit all to git
map <Leader>a :!git commit -av<CR>
" Leader-d: diff changes
map <Leader>d :!git diff<CR>

map <Leader>1 :call system("rcmd-run 1")<CR>
map <Leader>2 :call system("rcmd-run 2")<CR>
map <Leader>3 :call system("rcmd-run 3")<CR>
map <Leader>4 :call system("rcmd-run 4")<CR>
map <Leader>f :<C-U>call SelectFile()<CR>
map <Leader>g :<C-U>call SelectBuffer()<CR>
map <Leader>h :Hexmode<CR>
map <Leader>k :<C-u>call SaveCount()<CR>"zyiw:call RemoteMan(@z)<CR>

" Signs manipulation
nmap <Leader>z :call SignFixme()<CR>
nmap <Leader>x :call UnSignFixme()<CR>

let NERDCreateDefaultMappings=0
map <Leader>c <plug>NERDCommenterComment
map <Leader>u <plug>NERDCommenterUncomment

" Keys for standalone C programs.
" F5 - run
" <Leader>F5 - run in gdb (must be built via F6) and print backtrace (assuming crash)
" F6 - debug build
" <Leader>F6 - opt build
" F7 - run to cursor in the debugger
" <Leader>F7 - set a permanent breakpoint and run in the debugger
" F8 - run via valgrind
" <Leader>F8 - check the code's coverage
function SetCCommands()
	map <F5> :!./a.out <CR>
	map <Leader><F5> :call writefile(["r", "bt"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <F6> :!gcc -fstack-protector-all -std=c99 -lm -Wall -W -g3 '%:p' -lgmp -lpthread -lrt <CR>
	map <Leader><F6> :!gcc -fopenmp -std=c99 -O2 -lm -Wall -W '%:p' -lgmp -lpthread -lrt <CR>
	map <F7> :call writefile(["tbreak " . expand("%:p") . ':' . line("."), "r"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <Leader><F7> :call writefile(["break " . expand("%:p") . ':' . line("."), "r"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <F8> :!valgrind ./a.out <CR>
	map <Leader><F8> :!gcc -std=c99 -g -fprofile-arcs -ftest-coverage '%:p' -lm -lpthread -lrt; ./a.out; gcov -a -b -c '%:p'; vim '%:p.gcov'; rm %:p:r.{gcda,gcno} *.gcov; rm a.out <CR>
endfunction

" Keys for standalone C++ programs.
" F5 - run
" <Leader>F5 - run in gdb (must be built via F6) and print backtrace (assuming crash)
" F6 - debug build
" <Leader>F6 - opt build
" F7 - run to cursor in the debugger
" <Leader>F7 - set a permanent breakpoint and run in the debugger
" F8 - run via valgrind
" <Leader>F8 - check the code's coverage
" 
" :LT - load my CPP template
function SetCPPCommands()
	map <F5> :!./a.out <CR>
	map <Leader><F5> :call writefile(["r", "bt"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <F6> :!g++ -std=c++0x -fstack-protector-all -Wall -Wextra -g3 -D_GLIBCXX_DEBUG -DATHOME '%:p' -lgmp -lpthread -lrt <CR>
	map <Leader><F6> :!g++ -std=c++0x -Wall -Wextra -O2 -DATHOME '%:p' -lgmp -lpthread -lrt <CR>
	map <F7> :call writefile(["tbreak " . expand("%:p") . ':' . line("."), "r"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <Leader><F7> :call writefile(["break " . expand("%:p") . ':' . line("."), "r"], "gdb-tmp-cmdlist") \| !gdb -q -x gdb-tmp-cmdlist ./a.out; rm gdb-tmp-cmdlist <CR>
	map <F8> :!valgrind ./a.out <CR>
	map <Leader><F8> :!g++ -fprofile-arcs -ftest-coverage '%:p'; ./a.out; gcov -a -b -c '%:p'; vim '%:p.gcov'; rm %:p:r.{gcda,gcno} *.gcov; rm a.out <CR>

	com! LT 1,$d | r ~/.template.cpp | 1d | 33
endfunction

" Set my beloved keys.
autocmd BufEnter *.c call SetCCommands()
autocmd BufEnter *.h,*.H,*.hxx,*.hpp,*.C,*.cpp,*.cxx,*.cc,*.cs call SetCPPCommands()
